name: Unity Package Builder

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 02:00 UTC to check for updates
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      package_name:
        description: 'Specific package to build (optional)'
        required: false
        type: string

env:
  PYTHON_VERSION: '3.13'

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      packages-changed: ${{ steps.changes.outputs.packages }}
      config-changed: ${{ steps.changes.outputs.config }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            packages:
              - 'config/packages.yaml'
            config:
              - 'config/**'
              - 'src/**'
              - 'pyproject.toml'

  build-packages:
    needs: check-changes
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write  # Required for publishing to GitHub Package Registry
    if: needs.check-changes.outputs.packages-changed == 'true' || needs.check-changes.outputs.config-changed == 'true' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Check for package updates
        id: check-updates
        run: |
          echo "Checking for package updates..."
          unity-wrapper check > check_output.txt 2>&1
          cat check_output.txt

          # Check if any packages need updates
          if grep -q "Packages needing updates" check_output.txt; then
            echo "updates-needed=true" >> $GITHUB_OUTPUT
          else
            echo "updates-needed=false" >> $GITHUB_OUTPUT
          fi

      - name: Build specific package
        if: github.event.inputs.package_name != ''
        run: |
          echo "Building specific package: ${{ github.event.inputs.package_name }}"
          unity-wrapper build "${{ github.event.inputs.package_name }}"

      - name: Build all packages
        if: github.event.inputs.package_name == '' && steps.check-updates.outputs.updates-needed == 'true'
        run: |
          echo "Building all packages..."
          unity-wrapper build

      - name: Upload package artifacts
        if: steps.check-updates.outputs.updates-needed == 'true' || github.event.inputs.package_name != ''
        uses: actions/upload-artifact@v4
        with:
          name: unity-packages
          path: packages/
          retention-days: 30
          include-hidden-files: false

      - name: Set up Node.js for npm
        if: (steps.check-updates.outputs.updates-needed == 'true' || github.event.inputs.package_name != '') && github.ref == 'refs/heads/main'
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'

      - name: Create settings file for CI
        if: (steps.check-updates.outputs.updates-needed == 'true' || github.event.inputs.package_name != '') && github.ref == 'refs/heads/main'
        run: |
          # Create a temporary settings file with CI configuration
          cat > config/settings.yaml << EOF
          # Unity Package Wrapper Configuration for CI

          # Global settings for the package wrapper
          templates_dir: "templates"
          output_dir: "packages"
          work_dir: ".unity_wrapper_temp"

          # GitHub Package Registry settings (legacy, not used for npmjs)
          github:
            owner: "${{ github.repository_owner }}"
            repository: "${{ github.event.repository.name }}"

          # Default package settings
          defaults:
            author: "GitHub Actions <actions@github.com>"
            unity_version: "2019.4"
            unity_release: "0f1"
            package_type: "library"

          # Build settings
          build:
            auto_generate_asmdef: true
            auto_generate_meta: true
            auto_organize_runtime: true
            remove_csharp_project_files: true
            fix_global_namespaces: true
          EOF

      - name: Publish packages to npmjs.org
        if: (steps.check-updates.outputs.updates-needed == 'true' || github.event.inputs.package_name != '') && github.ref == 'refs/heads/main'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "Publishing packages to npmjs.org..."
          unity-wrapper publish --registry npmjs --owner klumhru

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run tests
        run: |
          pytest --cov=unity_wrapper --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run linting
        run: |
          black --check src tests
          flake8 src tests
          mypy src tests
